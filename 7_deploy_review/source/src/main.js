import './style/index.css';
import { GameScene } from './scenes/GameScene.js';
import { CompleteGameDemo } from './examples/CompleteGameDemo.js';
import { errorHandler } from './utils/ErrorHandler.js';
import { logger, log } from './utils/Logger.js';

/**
 * Ê∏∏Êàè‰∏ªÂÖ•Âè£
 * ÈõÜÊàêÊâÄÊúâ‰ºòÂåñÂäüËÉΩÁöÑÂÆåÊï¥Á§∫‰æã
 */
class GameApplication {
    constructor() {
        this.game = null;
        this.config = null;
        
        this.init();
    }
    
    init() {
        log.info('Initializing Phaser Game with Optimizations', {
            version: __VERSION__,
            buildTime: __BUILD_TIME__,
            debugMode: __DEV__,
            type: 'initialization'
        });
        
        // ÂàõÂª∫Ê∏∏ÊàèÈÖçÁΩÆ
        this.createGameConfig();
        
        // ÂàùÂßãÂåñÊ∏∏Êàè
        this.createGame();
        
        // ËÆæÁΩÆÂÖ®Â±Ä‰∫ã‰ª∂ÁõëÂê¨
        this.setupGlobalEvents();
        
        log.info('Game initialized successfully', { type: 'initialization' });
    }
    
    createGameConfig() {
        this.config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            parent: 'game',
            backgroundColor: '#2c3e50',
            
            // Áâ©ÁêÜÂºïÊìéÈÖçÁΩÆ
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 0 },
                    debug: __DEV__
                }
            },
            
            // Áº©ÊîæÈÖçÁΩÆ
            scale: {
                mode: Phaser.Scale.RESIZE,
                autoCenter: Phaser.Scale.CENTER_BOTH,
                min: {
                    width: 400,
                    height: 300
                },
                max: {
                    width: 1600,
                    height: 1200
                }
            },
            
            // Ê∏≤ÊüìÈÖçÁΩÆ
            render: {
                antialias: true,
                pixelArt: false,
                roundPixels: false,
                transparent: false,
                clearBeforeRender: true,
                preserveDrawingBuffer: false,
                premultipliedAlpha: true,
                failIfMajorPerformanceCaveat: false,
                powerPreference: 'high-performance',
                batchSize: 4096,
                maxLights: 10
            },
            
            // Èü≥È¢ëÈÖçÁΩÆ
            audio: {
                disableWebAudio: false,
                context: false,
                noAudio: false
            },
            
            // ËæìÂÖ•ÈÖçÁΩÆ
            input: {
                keyboard: true,
                mouse: true,
                touch: true,
                gamepad: false
            },
            
            // Âú∫ÊôØÈÖçÁΩÆ
            scene: [CompleteGameDemo],
            
            // ÂõûË∞ÉÂáΩÊï∞
            callbacks: {
                preBoot: this.preBoot.bind(this),
                postBoot: this.postBoot.bind(this)
            }
        };
    }
    
    createGame() {
        try {
            this.game = new Phaser.Game(this.config);
            
            // Â∞ÜÊ∏∏ÊàèÂÆû‰æãËÆæ‰∏∫ÂÖ®Â±ÄÂèòÈáèÔºàÁî®‰∫éË∞ÉËØïÔºâ
            if (__DEV__) {
                window.game = this.game;
            }
            
        } catch (error) {
            console.error('Failed to create game:', error);
            this.showFallbackContent();
        }
    }
    
    preBoot(game) {
        log.debug('Game pre-boot starting', { type: 'lifecycle' });
        
        // ËÆæÁΩÆÊ∏∏ÊàèÂ±ûÊÄß
        game.registry.set('version', __VERSION__);
        game.registry.set('buildTime', __BUILD_TIME__);
        game.registry.set('debug', __DEV__);
        
        log.gameEvent('pre-boot-complete');
    }
    
    postBoot(game) {
        log.debug('Game post-boot starting', { type: 'lifecycle' });
        
        // Ê∏∏ÊàèÂêØÂä®ÂÆåÊàêÂêéÁöÑÂàùÂßãÂåñ
        this.setupPerformanceMonitoring(game);
        this.setupErrorRecovery(game);
        
        // ÈöêËóèÂä†ËΩΩÂ±èÂπï
        this.hideLoadingScreen();
        
        log.gameEvent('post-boot-complete');
    }
    
    setupPerformanceMonitoring(game) {
        if (!__DEV__) return;
        
        // ÁõëÊéßÊ∏∏ÊàèÊÄßËÉΩ
        let lastTime = performance.now();
        let frameCount = 0;
        
        game.events.on('step', () => {
            frameCount++;
            
            if (frameCount % 60 === 0) { // ÊØè60Â∏ßÊ£ÄÊü•‰∏ÄÊ¨°
                const currentTime = performance.now();
                const deltaTime = currentTime - lastTime;
                const fps = Math.round(60000 / deltaTime);
                
                if (fps < 30) {
                    console.warn(`‚ö†Ô∏è Low FPS detected: ${fps}`);
                }
                
                lastTime = currentTime;
            }
        });
    }
    
    setupErrorRecovery(game) {
        // ÁõëÂê¨Ê∏∏ÊàèÈîôËØØ
        game.events.on('error', (error) => {
            console.error('Game error:', error);
            
            // Â∞ùËØïÊÅ¢Â§ç
            this.attemptGameRecovery();
        });
        
        // ÁõëÂê¨WebGL‰∏ä‰∏ãÊñá‰∏¢Â§±
        game.canvas.addEventListener('webglcontextlost', (event) => {
            console.warn('WebGL context lost');
            event.preventDefault();
            
            // ÊòæÁ§∫‰∏ä‰∏ãÊñá‰∏¢Â§±ÊèêÁ§∫
            this.showContextLostMessage();
        });
        
        game.canvas.addEventListener('webglcontextrestored', () => {
            console.log('WebGL context restored');
            
            // ÈöêËóèÊèêÁ§∫Âπ∂ÈáçÂêØÊ∏∏Êàè
            this.hideContextLostMessage();
            this.restartGame();
        });
    }
    
    setupGlobalEvents() {
        // ÁõëÂê¨È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñ
        document.addEventListener('visibilitychange', () => {
            if (this.game) {
                if (document.hidden) {
                    this.game.sound.pauseAll();
                    this.pauseGame();
                } else {
                    this.game.sound.resumeAll();
                    this.resumeGame();
                }
            }
        });
        
        // ÁõëÂê¨Á™óÂè£ÁÑ¶ÁÇπÂèòÂåñ
        window.addEventListener('blur', () => {
            if (this.game) {
                this.pauseGame();
            }
        });
        
        window.addEventListener('focus', () => {
            if (this.game) {
                this.resumeGame();
            }
        });
        
        // ÁõëÂê¨ÂÜÖÂ≠òË≠¶ÂëäÔºàÁßªÂä®ËÆæÂ§áÔºâ
        if ('memory' in performance) {
            setInterval(() => {
                const memoryInfo = performance.memory;
                const usedMemory = memoryInfo.usedJSHeapSize / 1024 / 1024;
                
                if (usedMemory > 100) { // 100MB
                    console.warn(`‚ö†Ô∏è High memory usage: ${usedMemory.toFixed(2)}MB`);
                    this.optimizeMemoryUsage();
                }
            }, 10000); // ÊØè10ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
        }
        
        // ÁõëÂê¨ÁΩëÁªúÁä∂ÊÄÅÂèòÂåñ
        if ('onLine' in navigator) {
            window.addEventListener('online', () => {
                console.log('üåê Network connection restored');
            });
            
            window.addEventListener('offline', () => {
                console.warn('üì° Network connection lost');
            });
        }
    }
    
    pauseGame() {
        if (this.game && this.game.scene.isActive('GameScene')) {
            const gameScene = this.game.scene.getScene('GameScene');
            if (gameScene && gameScene.physics) {
                gameScene.physics.pause();
                gameScene.anims.pauseAll();
            }
        }
    }
    
    resumeGame() {
        if (this.game && this.game.scene.isActive('GameScene')) {
            const gameScene = this.game.scene.getScene('GameScene');
            if (gameScene && gameScene.physics) {
                gameScene.physics.resume();
                gameScene.anims.resumeAll();
            }
        }
    }
    
    optimizeMemoryUsage() {
        if (!this.game) return;
        
        // Ê∏ÖÁêÜÁ∫πÁêÜÁºìÂ≠ò
        this.game.textures.each((texture) => {
            if (!texture.key.startsWith('__')) {
                // ‰øùÁïôÁ≥ªÁªüÁ∫πÁêÜÔºåÊ∏ÖÁêÜÂÖ∂‰ªñÁ∫πÁêÜ
                // texture.destroy(); // Ë∞®ÊÖé‰ΩøÁî®
            }
        });
        
        // Ê∏ÖÁêÜÈü≥È¢ëÁºìÂ≠ò
        this.game.cache.audio.entries.clear();
        
        // Âº∫Âà∂ÂûÉÂúæÂõûÊî∂ÔºàÂ¶ÇÊûúÂèØÁî®Ôºâ
        if (window.gc) {
            window.gc();
        }
        
        console.log('üßπ Memory optimization performed');
    }
    
    attemptGameRecovery() {
        console.log('üîÑ Attempting game recovery...');
        
        try {
            // ÈáçÂêØÂΩìÂâçÂú∫ÊôØ
            if (this.game && this.game.scene.isActive('GameScene')) {
                const gameScene = this.game.scene.getScene('GameScene');
                gameScene.scene.restart();
            }
        } catch (error) {
            console.error('Game recovery failed:', error);
            this.showFallbackContent();
        }
    }
    
    restartGame() {
        console.log('üîÑ Restarting game...');
        
        if (this.game) {
            this.game.destroy(true);
        }
        
        // Âª∂ËøüÈáçÊñ∞ÂàõÂª∫Ê∏∏Êàè
        setTimeout(() => {
            this.createGame();
        }, 1000);
    }
    
    showFallbackContent() {
        const gameContainer = document.getElementById('game');
        if (gameContainer) {
            gameContainer.innerHTML = `
                <div style="
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
                    color: white;
                    font-family: Arial, sans-serif;
                    text-align: center;
                ">
                    <div>
                        <div style="font-size: 64px; margin-bottom: 20px;">üòû</div>
                        <h1 style="margin-bottom: 16px;">Ê∏∏ÊàèÊó†Ê≥ïÂêØÂä®</h1>
                        <p style="margin-bottom: 24px; color: #cccccc;">
                            ÊÇ®ÁöÑÊµèËßàÂô®ÂèØËÉΩ‰∏çÊîØÊåÅWebGLÊàñÈÅáÂà∞‰∫ÜÂÖ∂‰ªñÈóÆÈ¢ò„ÄÇ
                        </p>
                        <button onclick="location.reload()" style="
                            padding: 12px 24px;
                            background: #4CAF50;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 16px;
                        ">
                            ÈáçÊñ∞Âä†ËΩΩ
                        </button>
                    </div>
                </div>
            `;
        }
    }
    
    showContextLostMessage() {
        const message = document.createElement('div');
        message.id = 'context-lost-message';
        message.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                display: flex;
                justify-content: center;
                align-items: center;
                font-family: Arial, sans-serif;
                z-index: 10000;
            ">
                <div style="text-align: center;">
                    <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                    <h2>ÂõæÂΩ¢‰∏ä‰∏ãÊñá‰∏¢Â§±</h2>
                    <p>Ê≠£Âú®Â∞ùËØïÊÅ¢Â§ç...</p>
                </div>
            </div>
        `;
        document.body.appendChild(message);
    }
    
    hideContextLostMessage() {
        const message = document.getElementById('context-lost-message');
        if (message) {
            message.remove();
        }
    }
    
    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.style.opacity = '0';
            loadingScreen.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
                loadingScreen.remove();
            }, 500);
        }
    }
    
    // ÂÖ¨ÂÖ±API
    getGame() {
        return this.game;
    }
    
    getVersion() {
        return __VERSION__;
    }
    
    getBuildTime() {
        return __BUILD_TIME__;
    }
    
    isDebugMode() {
        return __DEV__;
    }
}

// Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÊ∏∏Êàè
document.addEventListener('DOMContentLoaded', () => {
    const app = new GameApplication();
    
    // Â∞ÜÂ∫îÁî®ÂÆû‰æãËÆæ‰∏∫ÂÖ®Â±ÄÂèòÈáèÔºàÁî®‰∫éË∞ÉËØïÔºâ
    if (__DEV__) {
        window.gameApp = app;
    }
});

// ÂØºÂá∫Â∫îÁî®Á±ªÔºàÁî®‰∫éÊ®°ÂùóÂåñÔºâ
export { GameApplication };
